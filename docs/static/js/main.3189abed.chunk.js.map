{"version":3,"sources":["screens/account/index.tsx","reducers/player.ts","reducers/index.ts","utils/json.ts","utils/responsive.ts","services/youtube.ts","services/player.ts","screens/search/index.tsx","components/Item/index.tsx","components/Loading/index.tsx","screens/playing/index.tsx","components/Input/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["memo","className","playerInitialState","queue","playing","undefined","initialState","reducers","state","action","type","payload","filter","item","id","find","push","index","findIndex","shift","init","Provider","dispatch","useSelector","withState","getKey","obj","keys","thekeys","Array","isArray","results","search","forEach","Object","every","key","includes","value","self","indexOf","isMobile","window","orientation","originalFetch","fetch","getDownloadUrl","videoId","a","format","mimeType","ytdl","getInfo","info","player_response","streamingData","adaptiveFormats","url","scraper","then","response","text","content","split","Error","JSON","parse","searchVideos","query","join","map","video","console","log","title","simpleText","thumbnailObj","thumbnail","fetchTrack","audioSrc","yt","play","href","link","document","querySelector","createElement","rel","getElementsByTagName","appendChild","setFavicon","loading","enqueue","headers","timeout","props","onClick","handleClick","useCallback","itemClasses","classNames","alt","src","length","autoPlay","controls","Input","React","forwardRef","ref","placeholder","onChange","name","handleChange","event","target","inputClasses","visible","useState","setLoading","setValue","setResults","inputRef","useRef","clearTimeout","setTimeout","useEffect","current","focus","active","setActive","tabs","comp","AccountScreen","PlayingScreen","SearchScreen","tab","tabClasses","Comp","menuClasses","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3189abed.chunk.js","sourcesContent":["import React, { FC, memo } from 'react';\nimport './style.scss';\n\nconst AccountScreen: FC = () => {\n  return (\n    <div className=\"account-screen\">\n      <p>Available soon...</p>\n    </div>\n  );\n};\n\nexport default memo(AccountScreen);\n","import { IBaseState, IAction } from \"recost\";\nimport { ITrack } from \"../services/player\";\n\nexport interface IPlayerState extends IBaseState {\n  playing?: ITrack,\n  queue: ITrack[],\n};\n\nexport const playerInitialState = {\n  queue: [],\n  playing: undefined,\n};\n\nexport default function playingReducer(state: IPlayerState, action: IAction) {\n  let queue = [...state.queue];\n  let playing = state.playing;\n  switch (action.type) {\n    case 'PLAY':\n      playing = action.payload;\n      // eslint-disable-next-line\n    case 'REMOVE':\n      queue = queue.filter((item) => {\n        return item.id !== action.payload.id;\n      })\n      return {\n        ...state,\n        playing,\n        queue,\n      };\n    case 'ENQUEUE':\n      if (!queue.find((item => item.id === action.payload.id))) {\n        queue.push(action.payload);\n      }\n      return {\n        ...state,\n        queue,\n      };\n    case 'UPDATE':\n      const index = queue.findIndex((item => item.id === action.payload.id))\n      queue[index] = action.payload;\n      return {\n        ...state,\n        queue,\n      }\n    case 'DEQUEUE':\n      playing = queue.shift();\n      return {\n        ...state,\n        playing,\n        queue,\n      }\n    default: \n      return state;\n  }\n};","import init from 'recost';\nimport playerReducer, { playerInitialState, IPlayerState } from './player';\n\nexport interface IState extends IPlayerState {};\n\nconst initialState: IState = {\n  ...playerInitialState,\n};\n\nconst reducers = [\n  playerReducer,\n];\n\nexport const {\n  Provider,\n  dispatch,\n  useSelector,\n  withState,\n} = init(initialState, reducers);","\nexport function unique(array: any[]): any[] {\n  return array.filter((value, index, self) => self.indexOf(value) === index)\n}\n\nexport function getKey(obj: any, keys: string[] | string): any {\n  const thekeys = Array.isArray(keys) ? keys : [keys]\n  const results: any[] = [];\n  function search(obj: any): any {\n    if (Array.isArray(obj)) {\n      obj.forEach((item) => search(item))\n    } else if (typeof obj === 'object') {\n      const keys = Object.keys(obj)\n      if(thekeys.every((key) => keys.includes(key))) {\n        results.push(obj)\n      } else {\n        keys.forEach((key) => search(obj[key]))\n      }\n    }\n  }\n  search(obj);\n  return unique(results);\n}","export function isMobile() {\n  return typeof window.orientation !== \"undefined\"\n}\n\nexport function setFavicon(href: string) {\n  const link: any = document.querySelector(\"link[rel*='icon']\") || \n    document.createElement('link');\n  link.type = 'image/x-icon';\n  link.rel = 'shortcut icon';\n  link.href = href;\n  document.getElementsByTagName('head')[0].appendChild(link);\n}\n\nexport function setPageTitle(title: string) {\n  document.title = title;\n}","import ytdl, { videoFormat } from 'ytdl-core';\nimport { getKey } from '../utils/json';\nimport { isMobile } from '../utils/responsive';\n\nconst originalFetch = window.fetch\nwindow.fetch = function(url: RequestInfo, init?: RequestInit | undefined) {\n  if(typeof url === 'string' && (url.includes('youtube.com') || url.includes('googlevideo.com'))) {\n    url = 'https://cors-anywhere.herokuapp.com/' + url\n    init = {\n      ...(init || {}),\n      headers: {\n        ...((init && init.headers) || {}),\n        'Origin': '*'\n      }\n    }\n  }\n  return originalFetch(url, init)\n}\n\nexport async function getDownloadUrl(videoId: string): Promise<string> {\n  const filter = (format: videoFormat) => {\n    return format.mimeType\n      ? format.mimeType.includes('audio/mp4')\n      : false;\n  };\n  const info = await ytdl.getInfo(videoId, { filter });\n  const format: any = info.player_response.streamingData.adaptiveFormats.filter((format) => {\n    return (format as any).mimeType.includes('audio/mp4')\n  });\n  return format[0].url;\n}\n\nfunction scraper(url: string) {\n  return fetch(url).then((response) => {\n    return response.text();\n  }).then((content) => {\n    if (isMobile()) {\n      content = content.split('<div id=\"initial-data\"><!-- {')[1].split('} --></div>')[0];\n    } else {\n      content = content.split('window[\"ytInitialData\"] = {')[1].split('};')[0];\n    }\n    if (!content) {\n      throw new Error('no content')\n    }\n    return JSON.parse('{'+content+'}');\n  })\n}\n\nexport function getPlaylists(userId: string) {\n  return scraper(`https://${isMobile() ? 'm.': ''}youtube.com/user/${userId}/playlists`).catch(() => {\n    return scraper(`https://${isMobile() ? 'm.': ''}youtube.com/channel/${userId}/playlists`)\n  }).then((obj) => {\n    return getKey(obj, ['playlistId', 'title']).map((playlist: any) => {\n      return {\n        id: playlist.playlistId,\n        title: getKey(playlist.title, ['text'])[0].text,\n        thumbnail: getKey(playlist, ['height', 'url'])[0].url,\n      };\n    });\n  });\n}\n\nexport function getPlaylist(playlistId: string) {\n  const url = `https://youtube.com/playlist?list=${playlistId}`\n  return scraper(url).then((obj) => {\n    return getKey(obj, ['videoId', 'title']).map((video: any) => {\n      const titleKey = isMobile() ? 'text' : 'simpleText'\n      return {\n        id: video.videoId,\n        title: getKey(video.title, titleKey)[0][titleKey],\n        thumbnail: getKey(video, ['height', 'url'])[0].url,\n      }\n    })\n  })\n}\n\nexport function searchVideos(text: string) {\n  const query = text.split(' ').join('+');\n  const url = `https://youtube.com/results?search_query=${query}&sp=EgIQAQ%3D%3D`;\n  return scraper(url).then((obj) => {\n    return getKey(obj, ['videoId', 'title']).map((video: any) => {\n      console.log(video)\n      const title = video.title.simpleText || getKey(video.title, 'text')[0].text\n      const thumbnailObj = getKey(video, ['height', 'url'])[0]\n      const thumbnail = thumbnailObj && thumbnailObj.url\n      return {\n        id: video.videoId,\n        title,\n        thumbnail,\n      }\n    })\n  });\n}","import * as yt from \"./youtube\";\nimport { dispatch } from \"../reducers\";\nimport { setFavicon, setPageTitle } from \"../utils/responsive\";\n\nexport interface ITrack {\n  title: string,\n  thumbnail: string,\n  id: string,\n  audioSrc?: string,\n  loading?: boolean,\n}\n\nasync function fetchTrack(item: ITrack) {\n  console.log('item', item)\n  if (!item.audioSrc) {\n    const audioSrc = await yt.getDownloadUrl(item.id);\n    return { ...item, audioSrc }\n  }\n  return { ...item };\n}\n\nexport function play(item: ITrack) {\n  setFavicon(item.thumbnail);\n  setPageTitle(item.title);\n  dispatch({ type: 'PLAY', payload: {...item, loading: true} });\n  fetchTrack(item).then((item) => {\n    dispatch({ type: 'PLAY', payload: {...item, loading: false} });\n  })\n}\n\nexport function dequeue() {\n  dispatch({ type: 'DEQUEUE' });\n}\n\nexport function enqueue(item: ITrack) {\n  dispatch({ type: 'ENQUEUE', payload: item });\n  fetchTrack(item).then((item) => {\n    dispatch({ type: 'UPDATE', payload: item });\n  })\n}\n\nexport function remove(item: Partial<ITrack>) {\n  dispatch({ type: 'REMOVE', payload: item });\n}\n","import React, { useState, useCallback, FC, memo, useRef, useEffect } from 'react';\nimport * as yt from '../../services/youtube';\nimport { ITrack, enqueue } from '../../services/player';\nimport Item from '../../components/Item';\nimport Input from '../../components/Input';\nimport './style.scss';\nimport Loading from '../../components/Loading';\n\nlet timeout: NodeJS.Timeout;\n\nexport interface ISearchScreenProps {\n  visible?: boolean,\n}\n\nconst SearchScreen: FC<ISearchScreenProps> = ({ visible }) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [value, setValue] = useState<string>('');\n  const [results, setResults] = useState<ITrack[]>([]);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const search = useCallback(async () => {\n    setLoading(true);\n    const results = await yt.searchVideos(value || '');\n    setResults(results);\n    setLoading(false);\n  }, [value])\n\n  const handleChange = useCallback((value) => {\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n    setValue(value);\n    timeout = setTimeout(search, 500);\n  }, [setValue, search]);\n\n  useEffect(() => {\n    console.log('visible', visible)\n    console.log('inputRef.current', inputRef && inputRef.current)\n    if (visible && inputRef.current && !inputRef.current.value) {\n      inputRef.current.focus()\n    }\n  }, [inputRef, visible])\n\n  return (\n    <div className=\"search-screen\">\n      <Input ref={inputRef} placeholder=\"Search\" value={value} onChange={handleChange} />\n      <ul>\n        {loading && <Loading /> }\n        {results.map((item, index) => \n          <Item key={index} {...item} onClick={enqueue} />\n        )}\n      </ul>\n    </div>\n  )\n};\n\nexport default memo(SearchScreen);","import React, { memo, FC, useCallback } from 'react';\nimport { ITrack } from '../../services/player';\nimport './style.scss';\nimport { useSelector } from '../../reducers';\nimport classNames from 'classnames';\n\nexport interface IItemProps extends ITrack {\n  onClick?: (video:ITrack) => void;\n}\n\nconst Item: FC<IItemProps> = (props) => {\n  const { title, thumbnail, onClick } = props\n  const queue = useSelector((state) => state.queue);\n  const handleClick = useCallback(() => {\n    if (onClick) {\n      onClick(props);\n    }\n  }, [props, onClick])\n  const itemClasses = classNames({\n    'track-item': true,\n    'enqueued': queue.find(item => item.id === props.id),\n  })\n  return (\n    <div className={itemClasses} onClick={handleClick}>\n      <img alt={title} src={thumbnail} />\n      <h4>{title}</h4>\n    </div>\n  )\n}\n\nexport default memo(Item);","import React, { FC, memo } from 'react';\nimport './style.scss';\n\nconst Loading: FC = () => {\n  return (\n    <div className=\"loading\"></div>\n  );\n};\n\nexport default memo(Loading);","import React, { FC, memo } from 'react';\nimport { useSelector } from '../../reducers';\nimport { play } from '../../services/player';\nimport Item from '../../components/Item';\nimport './style.scss';\nimport Loading from '../../components/Loading';\n\nconst PlayingScreen: FC = () => {\n  const playing = useSelector((state) => state.playing);\n  const queue = useSelector((state) => state.queue);\n  return (\n    <div className=\"playing-screen\">\n      <ul>\n        <h2>Playing now:</h2>\n        {playing \n          ? <> \n              {playing.loading &&\n                <Loading />\n              } \n              <Item {...playing} />\n            </>\n          : <p>Nothing is playing. <br />Choose a video from queue below.</p>\n        }\n        <br />\n        <h2>Queue:</h2>\n        {queue.length === 0 &&\n          <p>No videos in queue. <br />Search some videos and add them.</p>\n        }\n        {queue.map((video, index) =>\n          <Item key={index} {...video} onClick={play} />\n        )}\n      </ul>\n      <audio autoPlay controls src={playing && playing.audioSrc}></audio>\n    </div>\n  )\n}\n\nexport default memo(PlayingScreen);","import React, { useCallback, FC, memo, RefObject } from 'react';\nimport classNames from 'classnames';\nimport './style.scss';\n\nexport interface IInputProps {\n  onChange: (value: string, name: any) => void,\n  name?: string,\n  value: any,\n  className?: string,\n  placeholder?: string,\n  ref?: RefObject<HTMLInputElement>,\n};\n\nconst Input: FC<IInputProps> = React.forwardRef((props, ref) => {\n  const { placeholder, className, onChange, name, value } = props;\n  const handleChange = useCallback((event) => {\n    onChange(event.target.value, name);\n  }, [onChange, name])\n  const inputClasses = classNames({\n    'input': true,\n    [className || '']: !!className,\n  })\n  return (\n    <input\n      ref={ref}\n      placeholder={placeholder}\n      className={inputClasses}\n      name={name}\n      value={value}\n      onChange={handleChange}\n    />\n  );\n});\n\nexport default memo(Input);","import React, { FC, useState, memo } from 'react';\nimport classNames from 'classnames';\n\nimport AccountScreen from './screens/account';\nimport PlayingScreen from './screens/playing';\nimport SearchScreen from './screens/search';\n\nimport './App.scss';\n\nconst App: FC = () => {\n  const [active, setActive] = useState<number>(1);\n  const tabs = [\n    { comp: AccountScreen, title: 'Account' },\n    { comp: PlayingScreen, title: 'Playing' },\n    { comp: SearchScreen, title: 'Search' },\n  ]\n  return (\n    <div className=\"app\">\n      <div className=\"tabs\">\n        {tabs.map((tab, index) => {\n          const tabClasses = classNames({ \n            'tab': true,\n            'active': index === active,\n          })\n          const Comp = tab.comp as any\n          return (\n            <div key={index} className={tabClasses}>\n              <Comp visible={index === active} />\n            </div>\n          )\n        })}\n      </div>\n      <div className=\"menubar\">\n        {tabs.map((tab, index) => {\n          const menuClasses = classNames({\n            'active': index === active,\n          })\n          return (\n            <li key={index} className={menuClasses} onClick={() => setActive(index)}>\n              {tab.title}\n            </li> \n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nexport default memo(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from './reducers';\n\nReactDOM.render(\n  <Provider>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() t2o register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}