{"version":3,"sources":["utils/json.ts","services/youtube.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["getKey","obj","thekey","results","search","Array","isArray","value","undefined","push","Object","keys","key","filter","index","self","indexOf","originalFetch","window","fetch","getDownloadUrl","videoId","a","format","mimeType","includes","ytdl","getInfo","info","player_response","streamingData","adaptiveFormats","url","scraper","then","response","text","content","split","JSON","parse","init","headers","App","useState","setUrl","user","setUser","playlists","setPlaylists","playlistId","setPlaylistId","videos","setVideos","handleChange","useCallback","event","target","name","fetchUser","userId","catch","fetchPlaylist","getPlaylist","handleClick","audioUrl","className","placeholder","onChange","onClick","map","playlist","video","autoPlay","controls","src","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.320830f2.chunk.js","sourcesContent":["\nexport function unique(array: any[]): any[] {\n  return array.filter((value, index, self) => self.indexOf(value) === index)\n}\n\nexport function getKey(obj: any, thekey: string): any {\n  const results: any[] = [];\n  function search(obj: any): any {\n    if (Array.isArray(obj)) {\n      for (const child of obj) {\n        const value = search(child);\n        if (value !== undefined) {\n          results.push(value)\n        }\n      }\n    } else if (typeof obj === 'object') {\n      const keys = Object.keys(obj)\n      for (const key of keys) {\n        if (key === thekey) {\n          results.push(obj[key])\n        } else {\n          const value = search(obj[key])\n          if (value !== undefined) {\n            results.push(value)\n          }\n        }\n      }\n    }\n  }\n  search(obj);\n  return unique(results);\n}","import ytdl, { videoFormat } from 'ytdl-core';\nimport { getKey } from '../utils/json';\n\nconst originalFetch = window.fetch\nwindow.fetch = function(url: RequestInfo, init?: RequestInit | undefined) {\n  if(typeof url === 'string' && (url.includes('youtube.com') || url.includes('googlevideo.com'))) {\n    url = 'https://cors-anywhere.herokuapp.com/' + url\n    init = {\n      ...(init || {}),\n      headers: {\n        ...((init && init.headers) || {}),\n        'Origin': '*',\n      }\n    }\n  }\n  return originalFetch(url, init)\n}\n\nexport async function getDownloadUrl(videoId: string) {\n  const filter = (format: videoFormat) => {\n    return format.mimeType\n      ? format.mimeType.includes('audio/mp4')\n      : false;\n  };\n  const info = await ytdl.getInfo(videoId, { filter });\n  const format: any = info.player_response.streamingData.adaptiveFormats.filter((format) => {\n    return (format as any).mimeType.includes('audio/mp4')\n  });\n  return format[0].url;\n}\n\nfunction scraper(url: string) {\n  return fetch(url).then((response) => {\n    return response.text();\n  }).then((content) => {\n    content = content.split('window[\"ytInitialData\"] = {')[1].split('};')[0];\n    return JSON.parse('{'+content+'}');\n  })\n}\n\nexport function getPlaylists(userId: string) {\n  return scraper(`https://www.youtube.com/user/${userId}/playlists`).catch(() => {\n    return scraper(`https://www.youtube.com/channel/${userId}/playlists`)\n  }).then((obj) => {\n    return getKey(obj, 'playlistId');\n  });\n}\n\nexport function getPlaylist(playlistId: string) {\n  const url = `https://www.youtube.com/playlist?list=${playlistId}`\n  return scraper(url).then((obj) => {\n    return getKey(obj, 'videoId')\n  })\n}","import React, { useCallback, useState } from 'react';\nimport './App.css';\nimport { getDownloadUrl, getPlaylists, getPlaylist } from './services/youtube';\n\nfunction App() {\n  const [url, setUrl] = useState<string>('')\n  const [user, setUser] = useState<string>('')\n  const [playlists, setPlaylists] = useState<string[]>()\n  const [playlistId, setPlaylistId] = useState<string>('')\n  const [videos, setVideos] = useState<string[]>()\n  const handleChange = useCallback((event) => {\n    const value = event.target.value\n    switch(event.target.name) {\n      case 'url':\n        return setUrl(value)\n      case 'userId':\n        return setUser(value)\n      case 'playlistId':\n        return setPlaylistId(value)\n      default:\n        return\n    }\n  }, [setUrl])\n  const fetchUser = useCallback(() => {\n    getPlaylists(user || '').then((playlists) => {\n      setPlaylists(playlists as string[])\n    })\n  }, [user, setPlaylists])\n  const fetchPlaylist = useCallback(() => {\n    getPlaylist(playlistId || '').then((videos) => {\n      setVideos(videos as string[])\n    })\n  }, [playlistId, setVideos])\n  const handleClick = useCallback(async () => {\n    const audioUrl = await getDownloadUrl(url || '');\n    setUrl(audioUrl)\n  }, [setUrl, url]);\n  return (\n    <div className=\"App\">\n      <h1>Youtubify</h1>\n      <input placeholder=\"youtube user id\" name=\"userId\" value={user} onChange={handleChange} />\n      <button onClick={fetchUser}>Go</button>\n      {playlists && <>\n        <h2>Playlists</h2>\n        {playlists.map((playlist, index) => \n          <p key={index}>\n            {playlist}\n          </p>\n        )}\n      </>}\n      <br /><br />\n      <input placeholder=\"youtube playlist id\" name=\"playlistId\" value={playlistId} onChange={handleChange} />\n      <button onClick={fetchPlaylist}>Go</button>\n      {videos && <>\n        <h2>Videos</h2>\n        {videos.map((video, index) => \n          <p key={index}>\n            {video}\n          </p>\n        )}\n      </>}\n      <br /><br />\n      <input placeholder=\"youtube video id\" name=\"url\" value={url} onChange={handleChange} />\n      <button onClick={handleClick}>Go</button>\n      <br /><br />\n      <audio autoPlay controls src={url}></audio>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}