{"version":3,"sources":["services/youtube.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["originalFetch","window","fetch","getDownloadUrl","videoId","a","filter","format","mimeType","includes","ytdl","getInfo","info","player_response","streamingData","adaptiveFormats","url","init","headers","App","useState","setUrl","handleChange","useCallback","event","target","value","handleClick","audioUrl","className","onChange","onClick","autoPlay","controls","src","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sNAEMA,EAAgBC,OAAOC,MAetB,SAAeC,EAAtB,kC,4CAAO,WAA8BC,GAA9B,mBAAAC,EAAA,6DACCC,EAAS,SAACC,GACd,QAAOA,EAAOC,UACVD,EAAOC,SAASC,SAAS,cAH1B,SAMcC,IAAKC,QAAQP,EAAS,CAAEE,WANtC,cAMCM,EAND,OAOCL,EAAcK,EAAKC,gBAAgBC,cAAcC,gBAAgBT,QAAO,SAACC,GAC7E,OAAQA,EAAeC,SAASC,SAAS,gBARtC,kBAUEF,EAAO,GAAGS,KAVZ,4C,sBAdPf,OAAOC,MAAQ,SAASc,EAAkBC,GAWxC,MAVkB,kBAARD,IAAqBA,EAAIP,SAAS,gBAAkBO,EAAIP,SAAS,sBACzEO,EAAM,uCAAyCA,EAC/CC,EAAI,eACEA,GAAQ,GADV,CAEFC,QAAQ,eACDD,GAAQA,EAAKC,SAAY,GADzB,CAEL,OAAU,SAITlB,EAAcgB,EAAKC,ICUbE,MApBf,WAAgB,IAAD,EACSC,qBADT,mBACNJ,EADM,KACDK,EADC,KAEPC,EAAeC,uBAAY,SAACC,GAChCH,EAAOG,EAAMC,OAAOC,SACnB,CAACL,IACEM,EAAcJ,sBAAW,sBAAC,4BAAAlB,EAAA,sEACPF,EAAea,GADR,OACxBY,EADwB,OAE9BP,EAAOO,GAFuB,2CAG7B,CAACP,EAAQL,IACZ,OACE,yBAAKa,UAAU,OACb,yCACA,2BAAOH,MAAOV,EAAKc,SAAUR,IAC7B,4BAAQS,QAASJ,GAAjB,MACA,6BACA,2BAAOK,UAAQ,EAACC,UAAQ,EAACC,IAAKlB,MCPhBmB,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.605ae590.chunk.js","sourcesContent":["import ytdl, { videoFormat } from 'ytdl-core';\n\nconst originalFetch = window.fetch\nwindow.fetch = function(url: RequestInfo, init?: RequestInit | undefined) {\n  if(typeof url === 'string' && (url.includes('youtube.com') || url.includes('googlevideo.com'))) {\n    url = 'https://cors-anywhere.herokuapp.com/' + url\n    init = {\n      ...(init || {}),\n      headers: {\n        ...((init && init.headers) || {}),\n        'Origin': '*',\n      }\n    }\n  }\n  return originalFetch(url, init)\n}\n\nexport async function getDownloadUrl(videoId: string) {\n  const filter = (format: videoFormat) => {\n    return format.mimeType\n      ? format.mimeType.includes('audio/mp4')\n      : false;\n  };\n  const info = await ytdl.getInfo(videoId, { filter });\n  const format: any = info.player_response.streamingData.adaptiveFormats.filter((format) => {\n    return (format as any).mimeType.includes('audio/mp4')\n  });\n  return format[0].url;\n}","import React, { useCallback, useState } from 'react';\nimport './App.css';\nimport { getDownloadUrl } from './services/youtube';\n\nfunction App() {\n  const [url, setUrl] = useState()\n  const handleChange = useCallback((event) => {\n    setUrl(event.target.value)\n  }, [setUrl])\n  const handleClick = useCallback(async () => {\n    const audioUrl = await getDownloadUrl(url);\n    setUrl(audioUrl)\n  }, [setUrl, url]);\n  return (\n    <div className=\"App\">\n      <h2>Youtubify</h2>\n      <input value={url} onChange={handleChange} />\n      <button onClick={handleClick}>Go</button>\n      <br />\n      <audio autoPlay controls src={url}></audio>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}