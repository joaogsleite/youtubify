{"version":3,"sources":["utils/json.ts","utils/responsive.ts","services/youtube.ts","App.tsx","services/localStorage.ts","serviceWorker.ts","index.tsx"],"names":["getKey","obj","keys","thekeys","Array","isArray","results","search","forEach","item","Object","every","key","includes","push","filter","value","index","self","indexOf","isMobile","window","orientation","originalFetch","fetch","getDownloadUrl","videoId","a","format","mimeType","ytdl","getInfo","info","player_response","streamingData","adaptiveFormats","url","scraper","then","response","text","content","split","Error","JSON","parse","init","headers","App","useState","setUrl","loading","setLoading","user","setUser","loadingUser","setLoadingUser","playlists","setPlaylists","playlistId","setPlaylistId","loadingVideos","setLoadingVideos","videos","setVideos","handleChange","useCallback","event","target","name","fetchUser","userId","catch","map","playlist","id","title","thumbnail","getPlaylists","localStorage","setItem","setCurrentUser","useEffect","currentUser","getItem","fetchPlaylist","video","titleKey","getPlaylist","handleClick","audioUrl","setTimeout","className","href","placeholder","onChange","onClick","alt","src","autoPlay","controls","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.8629f674.chunk.js","sourcesContent":["\nexport function unique(array: any[]): any[] {\n  return array.filter((value, index, self) => self.indexOf(value) === index)\n}\n\nexport function getKey(obj: any, keys: string[] | string): any {\n  const thekeys = Array.isArray(keys) ? keys : [keys]\n  const results: any[] = [];\n  function search(obj: any): any {\n    if (Array.isArray(obj)) {\n      obj.forEach((item) => search(item))\n    } else if (typeof obj === 'object') {\n      const keys = Object.keys(obj)\n      if(thekeys.every((key) => keys.includes(key))) {\n        results.push(obj)\n      } else {\n        keys.forEach((key) => search(obj[key]))\n      }\n    }\n  }\n  search(obj);\n  return unique(results);\n}","export function isMobile() {\n  return typeof window.orientation !== \"undefined\"\n}","import ytdl, { videoFormat } from 'ytdl-core';\nimport { getKey } from '../utils/json';\nimport { isMobile } from '../utils/responsive';\n\nconst originalFetch = window.fetch\nwindow.fetch = function(url: RequestInfo, init?: RequestInit | undefined) {\n  if(typeof url === 'string' && (url.includes('youtube.com') || url.includes('googlevideo.com'))) {\n    url = 'https://cors-anywhere.herokuapp.com/' + url\n    init = {\n      ...(init || {}),\n      headers: {\n        ...((init && init.headers) || {}),\n        'Origin': '*'\n      }\n    }\n  }\n  return originalFetch(url, init)\n}\n\nexport async function getDownloadUrl(videoId: string) {\n  const filter = (format: videoFormat) => {\n    return format.mimeType\n      ? format.mimeType.includes('audio/mp4')\n      : false;\n  };\n  const info = await ytdl.getInfo(videoId, { filter });\n  const format: any = info.player_response.streamingData.adaptiveFormats.filter((format) => {\n    return (format as any).mimeType.includes('audio/mp4')\n  });\n  return format[0].url;\n}\n\nfunction scraper(url: string) {\n  return fetch(url).then((response) => {\n    return response.text();\n  }).then((content) => {\n    if (isMobile()) {\n      content = content.split('<div id=\"initial-data\"><!-- {')[1].split('} --></div>')[0];\n    } else {\n      content = content.split('window[\"ytInitialData\"] = {')[1].split('};')[0];\n    }\n    if (!content) {\n      throw new Error('no content')\n    }\n    return JSON.parse('{'+content+'}');\n  })\n}\n\nexport function getPlaylists(userId: string) {\n  return scraper(`https://${isMobile() ? 'm.': ''}youtube.com/user/${userId}/playlists`).catch(() => {\n    return scraper(`https://${isMobile() ? 'm.': ''}youtube.com/channel/${userId}/playlists`)\n  }).then((obj) => {\n    return getKey(obj, ['playlistId', 'title']).map((playlist: any) => {\n      return {\n        id: playlist.playlistId,\n        title: getKey(playlist.title, ['text'])[0].text,\n        thumbnail: getKey(playlist, ['height', 'url'])[0].url,\n      };\n    });\n  });\n}\n\nexport function getPlaylist(playlistId: string) {\n  const url = `https://youtube.com/playlist?list=${playlistId}`\n  return scraper(url).then((obj) => {\n    return getKey(obj, ['videoId', 'title']).map((video: any) => {\n      const titleKey = isMobile() ? 'text' : 'simpleText'\n      return {\n        id: video.videoId,\n        title: getKey(video.title, titleKey)[0][titleKey],\n        thumbnail: getKey(video, ['height', 'url'])[0].url,\n      }\n    })\n  })\n}","import React, { useCallback, useState, useEffect } from 'react';\nimport './App.scss';\nimport { getDownloadUrl, getPlaylists, getPlaylist } from './services/youtube';\nimport { setCurrentUser, getCurrentUser } from './services/localStorage';\n\nfunction App() {\n  const [url, setUrl] = useState<string>('')\n  const [loading, setLoading] = useState<boolean>(false);\n  const [user, setUser] = useState<string>('');\n  const [loadingUser, setLoadingUser] = useState<boolean>(false);\n  const [playlists, setPlaylists] = useState<any[]>()\n  const [playlistId, setPlaylistId] = useState<string>('')\n  const [loadingVideos, setLoadingVideos] = useState<boolean>(false);\n  const [videos, setVideos] = useState<any[]>()\n  const handleChange = useCallback((event) => {\n    const value = event.target.value\n    switch(event.target.name) {\n      case 'url':\n        return setUrl(value)\n      case 'userId':\n        return setUser(value)\n      case 'playlistId':\n        return setPlaylistId(value)\n      default:\n        return\n    }\n  }, [setUrl])\n  const fetchUser = useCallback((userId?: string) => {\n    userId = userId || (user.includes('/user/')\n      ? user.split('/user/')[1].split('/')[0]\n      : user.includes('/channel/')\n        ? user.split('/channel/')[1].split('/')[0]\n        : user)\n    setUser(userId)\n    setLoadingUser(true);\n    getPlaylists(userId || '').then((playlists) => {\n      setCurrentUser(userId || '')\n      setLoadingUser(false);\n      setPlaylists(playlists as string[])\n    })\n  }, [user, setPlaylists, setLoadingUser])\n  useEffect(() => {\n    const currentUser = getCurrentUser()\n    if (currentUser) {\n      fetchUser(currentUser)\n    }\n    // eslint-disable-next-line\n  }, [])\n  const fetchPlaylist = useCallback(() => {\n    setLoadingVideos(true);\n    getPlaylist(playlistId || '').then((videos) => {\n      setVideos(videos as string[])\n      setLoadingVideos(false);\n    })\n  }, [playlistId, setVideos, setLoadingVideos])\n  const handleClick = useCallback(async () => {\n    setLoading(true);\n    const audioUrl = await getDownloadUrl(url || '');\n    setTimeout(() => setLoading(false), 2000);\n    setUrl(audioUrl)\n  }, [setUrl, url]);\n  return (\n    <div className=\"App\">\n      <h1>Youtubify</h1>\n      <hr />\n      <a target=\"_blank\" href=\"http://youtube.com/user\">Get my account url</a>\n      <input placeholder=\"youtube account id/url\" name=\"userId\" value={user} onChange={handleChange} />\n      <button onClick={()=>fetchUser()}>Go</button>\n      {loadingUser && (\n        <div className=\"loading\"></div>\n      )}\n      {playlists && <>\n        <h2>Playlists</h2>\n        <ul>\n        {playlists.map((playlist, index) => \n          <li key={index} onClick={() => setPlaylistId(playlist.id)}>\n            <img alt={playlist.title} src={playlist.thumbnail} />\n            <span>{playlist.title}</span>\n          </li>\n        )}\n        </ul>\n      </>}\n      <hr />\n      <a target=\"_blank\" href=\"https://support.google.com/youtube/answer/3127309?hl=en\">Your playlists must be public</a>\n      <input placeholder=\"youtube playlist id\" name=\"playlistId\" value={playlistId} onChange={handleChange} />\n      <button onClick={fetchPlaylist}>Go</button>\n      {loadingVideos && (\n        <div className=\"loading\"></div>\n      )}\n      {videos && <>\n        <h2>Videos</h2>\n        <ul>\n        {videos.map((video, index) => \n          <li key={index} onClick={() => setUrl(video.id)}>\n            <img alt={video.title} src={video.thumbnail} />\n            <span>{video.title}</span>\n          </li>\n        )}\n        </ul>\n      </>}\n      <hr />\n      <input placeholder=\"youtube video id\" name=\"url\" value={url} onChange={handleChange} />\n      <button onClick={handleClick}>Go</button>\n      {loading && (\n        <div className=\"loading\"></div>\n      )}\n      <br /><br /><br />\n      <audio autoPlay controls src={url}></audio>\n      <hr />\n    </div>\n  );\n}\n\nexport default App;\n","\nexport function getCurrentUser() {\n  return localStorage.getItem('userId');\n}\n\nexport function setCurrentUser(userId: string) {\n  localStorage.setItem('userId', userId);\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}